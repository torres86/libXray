name: Release Android AAR

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

env:
  ANDROID_NDK_VERSION: r26d  # Updated to support 16KB page alignment
  GO_VERSION: '1.21'

jobs:
  release-android:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        # 不需要安装额外的Python依赖，构建脚本是自包含的
        
    - name: Set up Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: ${{ env.ANDROID_NDK_VERSION }}
        
    - name: Set up Go mobile
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        gomobile init
        
    - name: Build Android AAR
      run: |
        export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT
        # Set environment variables for Android 15+ 16KB page alignment compatibility
        export CGO_CFLAGS="-O2 -g"
        export CGO_CXXFLAGS="-O2 -g"  
        export CGO_LDFLAGS="-Wl,-z,max-page-size=0x4000 -Wl,-z,common-page-size=0x4000"
        echo "Building AAR with 16KB page alignment for Android 15+ compatibility..."
        python3 build/main.py android
        
    - name: Verify build output
      run: |
        ls -la libXray.aar libXray-sources.jar
        echo "AAR size: $(du -h libXray.aar | cut -f1)"
        echo "Sources size: $(du -h libXray-sources.jar | cut -f1)"
        
    - name: Verify 16KB page alignment compatibility
      run: |
        # Extract AAR and check native libraries for 16KB alignment
        unzip -q libXray.aar
        echo "Checking 16KB page alignment for Android 15+ compatibility..."
        
        # Check all native libraries
        for arch in arm64-v8a armeabi-v7a x86 x86_64; do
          if [ -f "jni/$arch/libgojni.so" ]; then
            echo "Checking $arch architecture..."
            
            # Use readelf to check segment alignment (if available)
            if command -v readelf >/dev/null 2>&1; then
              echo "Segment alignment for $arch:"
              readelf -l "jni/$arch/libgojni.so" | grep -E "(LOAD|Align)" || true
            else
              echo "readelf not available, skipping detailed check for $arch"
            fi
            
            # Check file size alignment
            size=$(stat -c%s "jni/$arch/libgojni.so" 2>/dev/null || stat -f%z "jni/$arch/libgojni.so" 2>/dev/null || echo "0")
            remainder=$((size % 16384))
            if [ $remainder -eq 0 ]; then
              echo "✅ $arch: File size aligned to 16KB boundary"
            else
              echo "⚠️  $arch: File size not aligned to 16KB boundary (remainder: $remainder bytes)"
            fi
          fi
        done
        
        # Clean up extracted files
        rm -rf META-INF jni classes.jar AndroidManifest.xml R.txt res proguard.txt 2>/dev/null || true
        
    - name: Generate build info
      id: build_info
      run: |
        echo "BUILD_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        echo "TAG=android-$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.build_info.outputs.TAG }}
        name: "Android AAR - ${{ steps.build_info.outputs.BUILD_TIME }}"
        body: |
          🚀 **自动构建的Android AAR库**
          
          📋 **构建信息**
          - **提交SHA**: `${{ github.sha }}`
          - **短SHA**: `${{ steps.build_info.outputs.SHORT_SHA }}`
          - **构建时间**: ${{ steps.build_info.outputs.BUILD_TIME }}
          - **触发分支**: `${{ github.ref_name }}`
          
          📦 **包含文件**
          - `libXray.aar` - Android AAR库文件 (包含所有架构)
          - `libXray-sources.jar` - 源码文件
          
          ⚡ **支持的功能**
          - ✅ HTTP延迟测试 (`LibXray.ping()`)
          - ✅ **TCP延迟测试** (`LibXray.pingTCP()`) - 新增功能！
          - ✅ Xray配置验证
          - ✅ 统计查询
          - ✅ 地理数据处理
          
          🏗️ **支持的架构**
          - `armeabi-v7a` (32位ARM)
          - `arm64-v8a` (64位ARM) 
          - `x86` (32位x86)
          - `x86_64` (64位x86)
          
          🔧 **Android 15+ 兼容性**
          - ✅ 支持16KB页面大小 (Android 15+要求)
          - ✅ 符合Google Play 2025年11月新规
          - ✅ 使用NDK r26d构建
          
          📱 **在Android项目中使用**
          
          1. **下载AAR文件**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.build_info.outputs.TAG }}/libXray.aar
          ```
          
          2. **添加到项目**
          ```gradle
          // 在 app/build.gradle 中添加
          dependencies {
              implementation files('libs/libXray.aar')
          }
          ```
          
          3. **使用TCP测速**
          ```java
          // 创建请求
          String request = createTCPPingRequest(datDir, configPath, timeout, host, port, proxy);
          // 执行测速
          String result = LibXray.pingTCP(request);
          ```
          
          ---
          *此版本由GitHub Actions自动构建和发布*
        files: |
          libXray.aar
          libXray-sources.jar
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
